{"version":3,"sources":["component/Navigation.jsx","component/Fullpage.js","component/downIcon.jsx","sections/TitleSection.jsx","sections/AboutSection.jsx","component/skilCard.jsx","component/topIcon.jsx","sections/SkilsSection.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","data","sections","map","m","activeClass","to","title","spy","smooth","offset","duration","delay","style","marginRight","cursor","onClick","src","alt","width","margin","Fullpage","children","DownIcon","display","flexDirection","alignItems","justifyContent","marginBottom","transform","icon","maxWidth","TitleSection","changeColor","setState","color","state","bind","name","this","onMouseOver","onMouseLeave","subtitle","Object","keys","links","url","icons","down","Component","AboutSection","items","content","SkillCard","skill","image","TopIcon","SkillsSection","App","changeSnow","snow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd0055b8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport data from \"../data\";\r\nimport \"./Navigation.css\";\r\nimport { Link } from \"react-scroll\";\r\n\r\nconst Navigation = props => {\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <div className=\"menu\">\r\n        {data.sections.map(m => {\r\n          return (\r\n            <Link\r\n              activeClass=\"active\"\r\n              to={m.title}\r\n              spy={true}\r\n              smooth={true}\r\n              offset={50}\r\n              duration={500}\r\n              delay={100}\r\n            >\r\n              <p style={{ marginRight: \"50px\", cursor: \"pointer\" }}>\r\n                {m.title}\r\n              </p>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"magic\" onClick={props.onClick}>\r\n        <img\r\n          src=\"image/magic.png\"\r\n          alt=\"\"\r\n          style={{ width: \"30px\", margin: \"10px\", cursor: \"pointer\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./Fullpage.css\";\r\nconst Fullpage = (props)=> {\r\n    const { children } = props;\r\n    return (\r\n      <div className={`fullpage ${props.className || \"\"}`}>{children}</div>\r\n    )\r\n}\r\nexport default Fullpage;\r\n","import React from \"react\";\r\n\r\nconst DownIcon = props => {\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginBottom: \"-34px\",\r\n        transform: \"translateY(-45px)\",\r\n        cursor: \"pointer\"\r\n      }}\r\n    >\r\n      <div>\r\n        <img src={props.icon} style={{ maxWidth: \"30px\" }} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default DownIcon;\r\n","import React, { Component } from \"react\";\r\nimport Fullpage from \"../component/Fullpage\";\r\nimport data from \"../data\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport DownIcon from \"../component/downIcon\";\r\nimport {Element, Link } from \"react-scroll\";\r\n\r\nclass TitleSection extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { color: \"white\" };\r\n    this.changeColor = this.changeColor.bind(this);\r\n  }\r\n  changeColor = () => {\r\n    this.setState({\r\n      color: this.state.color === \"white\" ? \"yellow\" : \"white\"\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Element name=\"title\" className=\"element\">\r\n        <Fullpage className=\"first\">\r\n          <div>\r\n            <h1\r\n              className=\"title\"\r\n              style={{ color: this.state.color }}\r\n              onMouseOver={this.changeColor}\r\n              onMouseLeave={this.changeColor}\r\n            >\r\n              {data.title}\r\n            </h1>\r\n          </div>\r\n          <div>\r\n            <h2> {data.subtitle}</h2>\r\n          </div>\r\n          <div>\r\n            {Object.keys(data.links).map(m => {\r\n              return <SocialIcon className=\"icon\" url={data.links[m]} />;\r\n            })}\r\n          </div>\r\n        </Fullpage>\r\n        <Link\r\n          activeClass=\"active\"\r\n          to=\"About\"\r\n          spy={true}\r\n          smooth={true}\r\n          offset={50}\r\n          duration={500}\r\n          delay={100}\r\n        >\r\n          <DownIcon icon={data.icons.down}></DownIcon>\r\n        </Link>\r\n      </Element>\r\n    );\r\n  }\r\n}\r\nexport default TitleSection;\r\n","import React from \"react\";\r\nimport Fullpage from \"../component/Fullpage\";\r\nimport data from \"../data\";\r\nimport {  Element } from \"react-scroll\";\r\n\r\nconst AboutSection = () => {\r\n  return (\r\n    <Element name=\"About\" className=\"element\">\r\n      <Fullpage className=\"second\">\r\n      <h3>{data.sections[0].title}</h3>\r\n      <p>{data.sections[0].items[0].content}</p>\r\n    </Fullpage>\r\n    </Element>\r\n\r\n    \r\n  );\r\n};\r\nexport default AboutSection;\r\n","import React from \"react\";\r\nimport \"./SkillCard.css\";\r\nconst SkillCard = props => {\r\n  const { skill } = props;\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"image-wrapper\">\r\n        <img src={skill.content.image} alt=\"\" width=\"200px\" />\r\n      </div>\r\n      <div className=\"skill-title-wrapper\">\r\n        <h4>{skill.content.title}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillCard;\r\n","import React from \"react\";\r\n\r\nconst TopIcon = props => {\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        transform: \"translateY(45px)\",\r\n        cursor: \"pointer\"\r\n      }}\r\n    >\r\n      <div>\r\n        <img src={props.icon} style={{ maxWidth: \"30px\",transform: \"rotateX(180deg)\" }} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TopIcon;\r\n","import React from \"react\";\r\nimport Fullpage from \"../component/Fullpage\";\r\nimport data from \"../data\";\r\nimport SkillCard from \"../component/skilCard\";\r\nimport {Link, Element } from \"react-scroll\";\r\nimport TopIcon from \"../component/topIcon\";\r\n\r\nconst SkillsSection = () => {\r\n  return (\r\n    <Element name=\"Skills\" className=\"element\">\r\n      <Fullpage className=\"third\">\r\n        <h3>{data.sections[1].title}</h3>\r\n        <div className=\"cards-wrapper\">\r\n          {data.sections[1].items.map(m => {\r\n            return <SkillCard skill={m}></SkillCard>;\r\n          })}\r\n        </div>\r\n        <Link\r\n          activeClass=\"active\"\r\n          to=\"title\"\r\n          spy={true}\r\n          smooth={true}\r\n          offset={50}\r\n          duration={500}\r\n          delay={100}\r\n        >\r\n          <TopIcon icon={data.icons.down}></TopIcon>\r\n        </Link>\r\n      </Fullpage>\r\n    </Element>\r\n  );\r\n};\r\nexport default SkillsSection;\r\n","import React, { Component } from \"react\";\r\nimport SnowStorm from \"react-snowstorm\";\r\n\r\nimport Navigation from \"./component/Navigation\";\r\nimport TitleSection from \"./sections/TitleSection.jsx\";\r\nimport AboutSection from \"./sections/AboutSection.jsx\";\r\nimport SkillsSection from \"./sections/SkilsSection.jsx\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { snow: true};\r\n    this.changeSnow = this.changeSnow.bind(this);\r\n  }\r\n  changeSnow = () => {\r\n    this.setState({\r\n      snow: this.state.snow === true ? false : true\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.snow?<SnowStorm />:\"\"}\r\n        <Navigation onClick={()=>{this.changeSnow()}}></Navigation>\r\n        <TitleSection />\r\n        <AboutSection></AboutSection>\r\n        <SkillsSection></SkillsSection>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}